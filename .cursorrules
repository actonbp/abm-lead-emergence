# .cursorrules
# -------------------------------------------------------------------
# Configuration for Cursor AI assistance in the Leadership Emergence
# Agent-Based Modeling project with ML integration
# -------------------------------------------------------------------

# Project Structure Rules
1. Core Components:
   - src/models/: Base model implementations
   - src/models/perspectives/: Theoretical perspective models
   - src/simulation/: Simulation engine code
   - src/analysis/: Analysis tools and metrics
   - src/utils/: Shared utilities
2. Supporting Components:
   - scripts/: Execution and visualization scripts
   - config/: Parameter and configuration files
   - docs/: Documentation files
   - tests/: Test suite mirroring src/ structure
   - outputs/: Generated data and visualizations
3. Documentation:
   - README.md: Project overview
   - MODELS.md: Model documentation
   - CONTRIBUTING.md: Contribution guidelines
   - docs/*.md: Detailed documentation

# Model Development Guidelines
1. Model Hierarchy:
   - Inherit from BaseLeadershipModel
   - Follow established perspective patterns
   - Use consistent parameter structures
2. Implementation Requirements:
   - Include type hints
   - Add comprehensive docstrings
   - Implement parameter validation
   - Follow error handling patterns
3. Parameter Management:
   - Use ModelParameters dataclass
   - Document ranges in parameter_reference.md
   - Include validation rules
   - Maintain backward compatibility

# Code Quality Standards
1. Documentation:
   - Module-level docstrings explaining purpose
   - Class docstrings with examples
   - Method docstrings with parameters/returns
   - Type hints for all public methods
2. Testing:
   - Unit tests for all new functionality
   - Integration tests for model interactions
   - Parameter validation tests
   - Behavioral consistency tests
3. Style:
   - Follow black formatting
   - Use isort for imports
   - Follow pre-commit hooks
   - Maintain consistent naming

# Analysis and Visualization
1. Analysis Tools:
   - Use src/analysis/ for metrics
   - Follow established calculation patterns
   - Document methodology
   - Include validation checks
2. Visualization:
   - Use scripts/visualize_*.py naming
   - Follow project color schemes
   - Maintain consistent styling
   - Include proper labels and legends

# Development Workflow
1. Version Control:
   - Follow conventional commits
   - Use PR template
   - Update documentation
   - Pass CI/CD checks
2. Configuration:
   - Use config/ for parameters
   - Follow YAML format
   - Include parameter descriptions
   - Document changes
3. Output Management:
   - Use outputs/ for results
   - Follow naming conventions
   - Include timestamps
   - Maintain .gitignore rules

# Simulation Guidelines
1. Execution:
   - Use scripts/ for running
   - Follow parameter sweep patterns
   - Include progress reporting
   - Handle errors gracefully
2. Data Management:
   - Store in outputs/
   - Use consistent formats
   - Include metadata
   - Follow naming conventions

# Model Comparison Standards
1. Methodology:
   - Use standard metrics
   - Maintain consistent conditions
   - Document differences
   - Include statistical tests
2. Reporting:
   - Update MODELS.md
   - Include visualizations
   - Document limitations
   - Provide interpretation